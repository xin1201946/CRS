import {get_Time} from "./times.js";
import {getServer} from "./get_server.js";
import {check_browser} from "./browserCheck.js";
import {detectDevice} from "./check_platform.js";
import {getAllCookies} from "./cookieStorage.js";
import {getAllLocalStorage} from "./Settings.js";

let logs = [
    {"key":1,"time":get_Time(),'event':'Create event recorder','result':'successfully','comment':'' ,'color':'default'}
]; // successfully, warning , error
let displayedEvents=[];
export function add_log(event,result='Null',Comment=''){
    if (!Array.isArray(logs)) {
        logs = [];
    }
    const newLog = {
        "key":logs.length+1,
        "time": get_Time(),
        "event": event.toLowerCase(),
        "result":result,
        "comment":Comment,
        "color": result === "successfully" ? "green" : result === "warning" ?"yellow":"red"
    };
    logs.push(newLog);
}
function add_Server_log(timestamp,event,result='Null',remark=''){
    if (!Array.isArray(logs)) {
        logs = [];
    }
    const newLog = {
        "key":logs.length+1,
        "time": timestamp,
        "event": event,
        "result":result,
        "comment":remark,
        "color": result === "successfully" ? "green" : result === "warning" ?"yellow":"red"
    };
    logs.push(newLog);
}
export function clear_log(){
    logs.length = 0;
    add_Server_log(get_Time(),'Clear_ALL_Logs','successfully');
}
function get_server_logs() {
    fetch(getServer() + '/getlogs')
        .then(res => res.json())  // 解析响应为 JSON 数据
        .then(logs => {
            logs.forEach(log => {
                const { timestamp, event, result, remark } = log;
                // 判断事件是否已经展示过，避免重复
                if (!displayedEvents.includes(event)) {
                    add_Server_log(timestamp, event, result, remark);  // 调用已有的日志展示方法
                    displayedEvents.push(event);  // 添加该事件到已展示事件列表
                }
            });
        })
        .catch(error => {
            console.error("获取日志时出错：", error);  // 错误处理
        });
}

export function get_logs(){
    get_server_logs()
    return logs
}
export function get_error_logs() {
    return logs.filter(log => log.result === 'error');
}

export function get_warning_logs() {
    return logs.filter(log => log.result === 'warning');
}

export function get_successfully_logs() {
    return logs.filter(log => log.result === 'successfully');
}
export function saveLogsToTxt() {
    function formatCookies() {
        let cookies = getAllCookies();
        if (Object.keys(cookies).length === 0) return "No cookies found";
        let formatted = "";
        for (const [key, value] of Object.entries(cookies)) {
            formatted += `${key}: ${value}\n`;
        }
        return formatted.trim();
    }
    // 构建日志文件内容
    let content = "CCRS LOG\n";
    content += "======Base Information=====\n";
    content += "Tips:Basic information Lists the user's browser, UA, and device type information\n";
    content += `Create Time: ${get_Time()}\n`;
    content += `Browser: ${check_browser()}\n`;
    content += `Device Type: ${detectDevice()}\n`;
    content += `UA: ${navigator.userAgent}\n\n`;

    content += "========Cookies=========\n";
    content += "Tips:\n";
    content += "The Cookies section records snapshots of cookies  information when users download logs\n";
    content += `Cookies:\n${formatCookies()}\n\n`;

    content += "========Storage=========\n";
    content += "Tips:\n";
    content += "The Storage section records snapshots of  application storage information when users download logs\n";
    const localStorageData = getAllLocalStorage();
    content += `Storages:\n${localStorageData}\n\n`;

    content += "=========LOGS==========\n";
    content += "Tips:Logs lists all logs generated by the user from the start of the program to the user's download log\n";
    content += "Log:\n";
    content += "Time\tEvent\tResult\tComment\n";

    logs.forEach(log => {
        content += `${log.time}\t${log.event}\t${log.result}\t${log.comment}\n`;
    });

    // 生成并下载日志文件
    const blob = new Blob([content], { type: "text/plain;charset=utf-8" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "CCRS_LOG.txt";
    link.style.display = "none";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
export function get_SystemStatus(){
    if (get_error_logs.length === 0) {
        return '系统正常运行';
    } else {
        return '检测到存在'+ get_error_logs.length + '条错误信息';
    }
}